(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{315:function(t,a,s){"use strict";s.r(a);var e=s(28),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("AST，抽象语法树，在我们日常开发中似乎从来没涉及到，甚至可能根本没听说过。但是，它其实遍布了我们日常使用到的工具：vue/react，webpack，eslint，babel等，都是基于AST的。")]),t._v(" "),s("p",[t._v("我们做个比喻，把js源码比作一辆汽车，现在我们要整体改装/检修汽车，那么我们就需要用螺丝刀把汽车拆解成一堆零件，然后对其中需要改装/检修的零件进行改装/检修，最后再将零件重新组装起来，得到一台新的汽车。")]),t._v(" "),s("p",[t._v("上面例子中拆解得到的零件就是AST，而螺丝刀就是JS Parser（js语法解析器），常用的JS Parser有esprima、traceur、acorn、jsshift 等。以babel为例，原来的汽车就是源码（可能包含了es6语法），经过babel改装后的汽车就是语法为es5的代码。")]),t._v(" "),s("p",[t._v("通过上面的一系列操作（通过将源代码拆解为AST，然后对AST做一些改动，再拼装回去），我们可以做很多事：")]),t._v(" "),s("ul",[s("li",[t._v("代码语法的检查")]),t._v(" "),s("li",[t._v("代码风格的检查")]),t._v(" "),s("li",[t._v("代码的格式化")]),t._v(" "),s("li",[t._v("代码的高亮")]),t._v(" "),s("li",[t._v("代码错误提示")]),t._v(" "),s("li",[t._v("代码自动补全\n等等。")])]),t._v(" "),s("h2",{attrs:{id:"拆解过程一：词法分析-分词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拆解过程一：词法分析-分词"}},[t._v("#")]),t._v(" 拆解过程一：词法分析/分词")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("源代码 -> tokens\n")])])]),s("p",[t._v("拿到源码，对于解析器来说，这就是一堆的字母、数字、空格等，这就像小时候我们拿到一篇课文，老师会先让我们把词一个个分隔开，比如'我爱我的祖国'，要划分成'我/爱/我的/祖国'，这样我们才能更好的理解文章的意思，我们这一步也就是做类似的工作："),s("strong",[t._v("分词")]),t._v("。")]),t._v(" "),s("p",[t._v("可通过"),s("a",{attrs:{href:"https://resources.jointjs.com/demos/javascript-ast",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线demo"),s("OutboundLink")],1),t._v("看下")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTgy1gcxarqk39hj324c0ds41l.jpg",alt:""}}),t._v("\n图片左侧的代码经过分词得到图片右侧的结果，可以看到是一个个独立的token。整段代码的转换结果是一个数组，简化下就是这样的：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Keyword"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"var"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Identifier"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Punctuator"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"="')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Numeric"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"42"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .....")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("分词的大致过程就是，一个个字符解析，每增加一个字符就会跟js的关键字、操作符等做比较，如果满足条件就会被认为是一个token，然后继续开始对后续字符进行同样的操作；生成的token是具有语义的不可分割的最小单元。")]),t._v(" "),s("h2",{attrs:{id:"拆解过程二：语法分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拆解过程二：语法分析"}},[t._v("#")]),t._v(" 拆解过程二：语法分析")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("tokens -> AST\n")])])]),s("p",[t._v("经过分词，我们得到了一堆tokens，但是我们还不能知道这些tokens要表达什么意思。也就是我们已经拿到了词语：我、爱、我的、祖国，但是对于不同中文的人来说，他不知道每个单词的意思，也不知道语法，就依然不懂这句话表达什么意思。所以接下来我们要进行语法分析。\n我们可以先通过"),s("a",{attrs:{href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("js解析器工具"),s("OutboundLink")],1),t._v("体验下，在左侧输入代码：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var a = 1\n")])])]),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTgy1gcxbql96ryj31kg0u0gwe.jpg",alt:""}}),t._v("\n会看到右侧会展示对应的AST，在右侧将鼠标放在对应节点上，左侧对应的代码会高亮。上面的工具栏还可以切换不同的解析器，一些解析器的解析结果还会有经过分词得到的tokens。")]),t._v(" "),s("p",[t._v("AST的节点有很多类型，我们可以展开树形结构看一看，想要更多了解具体可以参考文章"),s("a",{attrs:{href:"https://juejin.im/post/5c8d3c48f265da2d8763bdaf#heading-11",target:"_blank",rel:"noopener noreferrer"}},[t._v("高级前端基础-JavaScript抽象语法树AST"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"改装过程：转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#改装过程：转换"}},[t._v("#")]),t._v(" 改装过程：转换")]),t._v(" "),s("p",[t._v("拆解得到AST后，前期准备工作就算完成了，下面要开始最核心的工作了：改装(转换)。我们就来简单实现一个例子：将变量a替换为变量b。")]),t._v(" "),s("p",[t._v("这里选择解析器babelv7，输入如下代码")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 将变量a替换为b\nexport default function (babel) {\n  const { types: t } = babel;\n  \n  return {\n    name: \"ast-transform\", // not required\n    visitor: {\n      VariableDeclarator(path, state) {\n        if (path.node.id.name == 'a') {\n          path.node.id = t.identifier('b')\n        }\n      }\n    }\n  };\n}\n")])])]),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTgy1gcxcgzqgafj31m70u0grx.jpg",alt:""}}),t._v("\n则可以看到，"),s("code",[t._v("var a = 1")]),t._v("被转换为了"),s("code",[t._v("var b = 1")])]),t._v(" "),s("h2",{attrs:{id:"重装过程：生成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重装过程：生成"}},[t._v("#")]),t._v(" 重装过程：生成")]),t._v(" "),s("p",[t._v("转换得到了新的AST，最后一步就是重装了。不过上一节的工具里，已经把这一步一起完成了，实际上这是两个步骤，在babel中也是不同的模板来完成的")]),t._v(" "),s("ul",[s("li",[t._v("@babel/parser： js 代码 ->  AST 抽象语法树；")]),t._v(" "),s("li",[t._v("@babel/traverse：  对 AST 节点进行递归遍历；")]),t._v(" "),s("li",[t._v("@babel/types： 对具体的 AST 节点进行进行修改；")]),t._v(" "),s("li",[t._v("@babel/generator：  AST 抽象语法树 -> 新的 js 代码；")])]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://juejin.im/post/5c8d3c48f265da2d8763bdaf#heading-11",target:"_blank",rel:"noopener noreferrer"}},[t._v("高级前端基础-JavaScript抽象语法树AST"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://segmentfault.com/a/1190000016231512",target:"_blank",rel:"noopener noreferrer"}},[t._v("AST抽象语法树——最基础的javascript重点知识，99%的人根本不了解"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/5e0a245df265da33cf1aea91#heading-8",target:"_blank",rel:"noopener noreferrer"}},[t._v("把手带你入门 AST 抽象语法树"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);