(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{282:function(t,a,s){"use strict";s.r(a);var n=s(28),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"暂时性死区的表现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂时性死区的表现"}},[t._v("#")]),t._v(" 暂时性死区的表现")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//VM58:2 Uncaught ReferenceError: Cannot access 'value' before initialization")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("进入当前作用域，在变量声明之前访问变量，是无法访问到的。\n这是由于let/const没有变量提升（提升到作用域顶部），因此通过let/const定义的变量不会被提升到作用域顶部——也就是此时的块级作用域，因此在声明之前无法访问。\n但是"),s("strong",[t._v("为什么报错信息是“Cannot access 'value' before initialization”")]),t._v("，而不是我们常见的“value is not defined”呢，这两者有啥区别？\n比如以下代码，由于块级作用域，外部是没有value声明的，所以会报错“value is not defined”")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Uncaught ReferenceError: value is not defined")]),t._v("\n")])])]),s("h2",{attrs:{id:"原因排查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原因排查"}},[t._v("#")]),t._v(" 原因排查")]),t._v(" "),s("p",[t._v("我们通过控制台的作用域来看看")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("debugger")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/0082zybpgy1gca6vymoxjj30y80fyq5k.jpg",alt:""}}),t._v("\n从上图可以看到，控制台的Block作用域里value已经存在了，说明value肯定是被定义了，因此肯定不会报错“value is not defined”，但是又不法访问，原因是当前时刻为“before initialization”。\n"),s("strong",[t._v("那也就是“defined”和“initialization”是有区别的？")])]),t._v(" "),s("h2",{attrs:{id:"我这样理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#我这样理解"}},[t._v("#")]),t._v(" 我这样理解")]),t._v(" "),s("p",[t._v("为了理解以上现象，\n参考文章"),s("a",{attrs:{href:"https://fangyinghang.com/let-in-js/",target:"_blank",rel:"noopener noreferrer"}},[t._v("我用了两个月的时间才理解 let"),s("OutboundLink")],1),t._v("，我们可以把 JS 变量分为「创建create、初始化initialize 和赋值assign」3个步骤。")]),t._v(" "),s("h3",{attrs:{id:"var-声明的「创建、初始化和赋值」过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var-声明的「创建、初始化和赋值」过程"}},[t._v("#")]),t._v(" var 声明的「创建、初始化和赋值」过程")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined,undefined")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("执行上述代码时，会有如下步骤：")]),t._v(" "),s("ul",[s("li",[t._v("找到代码块中所有用 var 声明的变量，在这个环境中「创建」这些变量（即 x 和 y）。")]),t._v(" "),s("li",[t._v("将这些变量「初始化」为 undefined。")]),t._v(" "),s("li",[t._v("开始执行代码\nx = 1 将 x 变量「赋值」为 1\ny = 2 将 y 变量「赋值」为 2\n也就是"),s("strong",[t._v("var在执行赋值操作之前，就将「创建变量，并将其初始化为 undefined」")]),t._v("。因此通过var声明变量之前，在同一作用域下访问变量，得到的是undefined。")])]),t._v(" "),s("h3",{attrs:{id:"function的「创建、初始化和赋值」过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#function的「创建、初始化和赋值」过程"}},[t._v("#")]),t._v(" function的「创建、初始化和赋值」过程")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("执行上述代码时，会有如下步骤：")]),t._v(" "),s("ul",[s("li",[t._v("找到代码中的function声明的变量，在这个环境中「创建」这些变量")]),t._v(" "),s("li",[t._v("将这些变量「初始化」并「赋值」为function "),s("code",[t._v("fn(){console.log(1)}")])]),t._v(" "),s("li",[t._v("开始执行代码fn")])]),t._v(" "),s("p",[t._v("也就是说 function 声明会在代码执行之前就「创建、初始化并赋值」。")]),t._v(" "),s("h3",{attrs:{id:"let-声明的「创建、初始化和赋值」过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#let-声明的「创建、初始化和赋值」过程"}},[t._v("#")]),t._v(" let 声明的「创建、初始化和赋值」过程")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Cannot access 'value' before initialization")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("找到所有用 let 声明的变量，在环境中「创建」这些变量")]),t._v(" "),s("li",[t._v("开始执行代码（注意现在还没有初始化）")]),t._v(" "),s("li",[t._v("执行let x = 1，将 x 「初始化」，并「赋值」为 1（let x 实现初始化，x = 1实现赋值）")]),t._v(" "),s("li",[t._v("对let y = 2实现相同的步骤")])]),t._v(" "),s("h3",{attrs:{id:"无变量提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无变量提升"}},[t._v("#")]),t._v(" 无变量提升")]),t._v(" "),s("p",[t._v("从以上分析来看，")]),t._v(" "),s("ul",[s("li",[t._v("我们平常所说的“变量提升“其实是指将「创建」和「初始化」这2个步骤都提升了")]),t._v(" "),s("li",[t._v("var存在变量提升，因为其同时提升了「创建」和「初始化」；")]),t._v(" "),s("li",[t._v("function存在变量提升，因为其同时提升了「创建」、「初始化」和「赋值」；")]),t._v(" "),s("li",[t._v("let/const不存在变量提升，实际上是因为"),s("strong",[t._v("let/const只提升了「创建」，而没有提升「初始化」")]),t._v("。")])]),t._v(" "),s("p",[t._v("同时，上面的报错也很好理解了：")]),t._v(" "),s("ul",[s("li",[t._v("“value is not defined”是因为变量没有「创建」")]),t._v(" "),s("li",[t._v("“Cannot access 'value' before initialization”是「创建」了变量，但没「初始化」")])]),t._v(" "),s("p",[t._v("因此，"),s("strong",[t._v("所谓暂时性死区，就是不能在初始化之前使用变量。")])]),t._v(" "),s("h2",{attrs:{id:"需要暂时性死区的原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#需要暂时性死区的原因"}},[t._v("#")]),t._v(" 需要暂时性死区的原因")]),t._v(" "),s("p",[t._v("ES6增加暂时性死区这一特性，主要是为了"),s("strong",[t._v("减少运行时错误，防止声明之前就使用")]),t._v("。")]),t._v(" "),s("p",[t._v("但是为什么不直接将「创建」过程也不提升呢？")]),t._v(" "),s("p",[t._v("我的理解是由于js是静态作用域，在代码编译的时候就会去分析各作用域的变量对象，因此「创建」过程一定是在代码执行前完成，也就是一定会被提升，那为了防止大家在声明之前就使用，就在「初始化」上做文章了，没有讲「初始化」不提升，这样就不能在声明之前使用了。")]),t._v(" "),s("p",[t._v("参考:")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://fangyinghang.com/let-in-js/",target:"_blank",rel:"noopener noreferrer"}},[t._v("我用了两个月的时间才理解 let"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[t._v("阮一峰《ES6标准入门》")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);